plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'com.blog.search'
version = '-blog-homework'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
jar{
	enabled = false
}
jacoco {
    toolVersion = '0.8.8'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'org.apache.commons:commons-lang3'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	implementation 'junit:junit'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}
jacocoTestReport {
	dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
	afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
						"**/vo/*",
						"**/util/*",
						"**/*Application*"
					] )
        }))
    }
}
test {
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}
}